#!/usr/bin/python3
#+
# This script displays picture files in turn from specified directories,
# and allows the user to hit keystrokes to apply commands to them.
#
# Invoke this script as follows:
#
#     SortPictures [options] item [item ...]
#
# where each "item" is either the name of an image file or of a
# directory containg image files to be shown. Valid options are:
#
#     --act=k:cmd
#         defines a key binding, where k is a single ASCII character
#         which, when typed by the user, invokes cmd. This option can be
#         specified multiple times with different k values, to define multiple
#         key bindings. When cmd is invoked, occurrences of %s are substituted
#         with the full name of the image file.
#    --move=k:dir
#         defines a key binding, where k is a single ASCII character
#         which, when typed by the user, will move the current file into the
#         directory dir.
#    --random
#         equivalent to --sort=random
#    --scale=scalefactor[,how]
#         specifies a scale factor and method to be applied to each image before display.
#         scalefactor is interpreted as a percentage if it ends with a "%", otherwise
#         as a number. If omitted, the default is 1.0 (100%).
#         how is the scaling method: "nearest", "tiles", "bilinear" or "hyper"
#         (see https://developer.gnome.org/gdk-pixbuf/stable/gdk-pixbuf-Scaling.html#gdk-pixbuf-scale-simple
#         for the details). If omitted, the default is "tiles".
#    --sort=how
#         displays the images in order according to how:
#             none (default) -- no special sorting
#             mod -- sort by last-mod date
#             name -- sort by name
#             random -- display in random order
#    --start=n
#         start the display at picture n in the sequence, instead
#         of picture 1.
#
# Standard keystrokes are:
#    right or down arrow -- go to next picture
#    left or up arrow -- go to previous picture
#    F1 -- write filename path to standard output
#    F11 -- rotate picture anticlockwise
#    F12 -- rotate picture clockwise
#
# Created by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
#-

import sys
import os
import random
import getopt
from gi.repository import \
    GObject, \
    Gdk, \
    GdkPixbuf, \
    Gtk

#+
# Useful stuff
#-

def ForEachFile(ArgList, Action, ActionArg) :
    """invokes Action(FileName, ActionArg) for each non-directory item
    found in ArgList. If an item is not a directory, passes it directly
    to action; otherwise, passes each file directly contained within it,
    unless the name ends with "...", in which case all file descendants
    of the directory are passed."""

    def ForEach(Item, Recurse) :
        if os.path.isdir(Item) :
            for Child in os.listdir(Item) :
                Child = os.path.join(Item, Child)
                if os.path.isdir(Child) :
                    if Recurse :
                        ForEach(Child, True)
                    #end if
                else :
                    Action(Child, ActionArg)
                #end if
            #end for
        else :
            Action(Item, ActionArg)
        #end if
    #end ForEach

#begin ForEachFile
    for Arg in ArgList :
        if Arg.endswith("...") :
            Recurse = True
            Arg = Arg[0 : -3]
        else :
            Recurse = False
        #end if
        ForEach(Arg, Recurse)
    #end for
#end ForEachFile

#+
# Keypress actions
#-

def MakeRunCmd(Fmt) :
    """returns a function which substitutes its argument into Fmt and
    executes the result as a shell command."""

    def RunCmd(FileName) :
        Cmd = Fmt % FileName
        print(Cmd)
        os.system(Cmd)
    #end RunCmd

#begin MakeRunCmd
    return \
        RunCmd
#end MakeRunCmd

def MakeMoveCmd(Dir) :
    """returns a function which moves the file named by its argument into Dir."""

    def MoveCmd(FileName) :
        DstName = os.path.join(Dir, os.path.basename(FileName))
        print("move %s => %s" % (FileName, DstName))
        os.rename(FileName, DstName)
    #end MoveCmd

#begin MakeMoveCmd
    if not os.path.isdir(Dir) :
        raise RuntimeError("“%s” is not a directory" % Dir)
    #end if
    return \
        MoveCmd
#end MakeMoveCmd

#+
# GUI callbacks
#-

# globals:
# TheImage -- GDK pixbuf object containing image being displayed
# ImageDisplay -- GTK image object for showing an image
# ImageLabel -- GTK label object for showing image name
#
# Act -- mapping of actions to perform by keystroke
# Files -- list of image files to show
# FileIndex -- index into Files of image being shown

def DestroyWindow(TheWindow) :
    # called when main window's close box is clicked.
    Gtk.main_quit()
#end DestroyWindow

def LoadImage() :
    # loads the image from the currently selected file.
    global TheImage
    ImageName = Files[FileIndex]
    try :
        TheImage = GdkPixbuf.Pixbuf.new_from_file(ImageName)
    except GObject.GError :
        TheImage = None
    #end try
    if TheImage != None and ScaleFactor != None :
        TheImage = TheImage.scale_simple(int(TheImage.get_width() * ScaleFactor), int(TheImage.get_height() * ScaleFactor), ScaleHow)
    #end if
    ImageLabel.set_text("%u/%u: %s" % (FileIndex + 1, len(Files), ImageName))
#end LoadImage

def RotateImage(Clockwise) :
    # rotates the displayed image by 90 degrees.
    global TheImage
    if Clockwise :
        Direction = GdkPixbuf.PixbufRotation.CLOCKWISE
    else :
        Direction = GdkPixbuf.PixbufRotation.COUNTERCLOCKWISE
    #end if
    if TheImage != None :
        TheImage = TheImage.rotate_simple(Direction)
    #end if
#end RotateImage

def ShowImage() :
    # displays the currently-loaded image in the main window.
    if TheImage != None :
        ImageWidth = TheImage.get_property("width")
        ImageHeight = TheImage.get_property("height")
        if ImageWidth > MaxImageDisplay.x or ImageHeight > MaxImageDisplay.y :
            ScaleFactor = min \
              (
                MaxImageDisplay.x * 1.0 / ImageWidth,
                MaxImageDisplay.y * 1.0 / ImageHeight
              )
            UseImage = TheImage.scale_simple \
              (
                dest_width = int(round(ScaleFactor * ImageWidth)),
                dest_height = int(round(ScaleFactor * ImageHeight)),
                interp_type = GdkPixbuf.InterpType.BILINEAR
              )
        else :
            UseImage = TheImage
        #end if
        ImageDisplay.set_from_pixbuf(UseImage)
    else :
        ImageDisplay.set_from_stock \
          (
            Gtk.STOCK_MISSING_IMAGE,
            Gtk.IconSize.LARGE_TOOLBAR
          )
    #end if
#end ShowImage

def KeyPressEvent(TheWindow, TheEvent) :
    # called in response to a keystroke when the main window has the focus.
    global Files, FileIndex
    # print("Keypress type %d val %d" % (TheEvent.type, TheEvent.keyval)) # debug
    Key = TheEvent.keyval
    if Key == Gdk.KEY_Down or Key == Gdk.KEY_Right :
        if FileIndex + 1 < len(Files) :
            FileIndex += 1
            LoadImage()
            ShowImage()
        #end if
    elif Key == Gdk.KEY_Up or Key == Gdk.KEY_Left :
        if FileIndex > 0 :
            FileIndex -= 1
            LoadImage()
            ShowImage()
        #end if
    elif Key == Gdk.KEY_F1 :
        sys.stdout.write(Files[FileIndex] + "\n")
    elif Key == Gdk.KEY_F11 :
        RotateImage(False)
        ShowImage()
    elif Key == Gdk.KEY_F12 :
        RotateImage(True)
        ShowImage()
    elif Key in Act :
        Act[Key](Files[FileIndex])
    #end if
    return True
#end KeyPressEvent

#+
# Mainline
#-

def AddFile(Item, Files) :
    # ForEachFile action to collect names of all image files.
    Files.append(Item)
#end AddFile

ModDate = {} # cache of mod dates to avoid repeated lookups
def ModDateKey(File) :
    """sort key callback which orders files by their last-mod date."""
    if not File in ModDate :
        ModDate[File] = os.stat(File).st_mtime
    #end if
    return \
        ModDate[File]
#end ModDateKey

def Order(Files) :
    # sorts Files according to the key mapping defined by SortKey.
    Files.sort(key = SortKey)
#end Order

(Opts, Args) = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["act=", "move=", "random", "scale=", "sort=", "start="]
  )

Files = []
ForEachFile(Args, AddFile, Files)

Act = {}
Sort = None
FileIndex = 0
ScaleFactor = None
for Keyword, Value in Opts :
    if Keyword == "--act" :
        if len(Value) > 2 and Value[1] == ":" :
            Act[ord(Value[0])] = MakeRunCmd(Value[2:])
            # print("act %d => \"%s\"" % (ord(Value[0]), Value[2:])) # debug
        else :
            raise getopt.error("Invalid --act syntax: \"%s\"" % Value)
        #end if
    elif Keyword == "--move" :
        if len(Value) > 2 and Value[1] == ":" :
            Act[ord(Value[0])] = MakeMoveCmd(Value[2:])
            # print("move %d => \"%s\"" % (ord(Value[0]), Value[2:])) # debug
        else :
            raise getopt.error("Invalid --move syntax: \"%s\"" % Value)
        #end if
    elif Keyword == "--random" :
        Sort = random.shuffle
    elif Keyword == "--scale" :
        Value = Value.split(",", 1)
        if len(Value) == 2 :
            ScaleHow = \
                {
                    "nearest" : GdkPixbuf.InterpType.NEAREST,
                    "tiles" : GdkPixbuf.InterpType.TILES,
                    "bilinear" : GdkPixbuf.InterpType.BILINEAR,
                    "hyper" : GdkPixbuf.InterpType.HYPER,
                }[Value[1]]
        else :
            ScaleHow = GdkPixbuf.InterpType.TILES # default
        #end if
        Value = Value[0]
        if Value.endswith("%") :
            ScaleFactor = float(Value[:-1]) / 100
        else :
            ScaleFactor = float(Value)
        #end if
    elif Keyword == "--sort" :
        if Value == "random" :
            Sort = random.shuffle
        elif Value == "mod" :
            SortKey = ModDateKey
            Sort = Order
        elif Value == "name" :
            SortKey = lambda Name : os.path.split(Name)[1]
            Sort = Order
        elif Value == "none" :
            Sort = None
        else :
            raise getopt.error("Invalid sort option %s" % Value)
        #end if
    elif Keyword == "--start" :
        FileIndex = int(Value) - 1
    #end if
#end for
if len(Files) == 0 :
    raise getopt.error("Nothing to do")
#end if
if FileIndex < 0 or FileIndex >= len(Files) :
    raise getopt.error("--start index out of range")
#end if
if Sort != None :
    Sort(Files)
#end if

TheImage = None # to begin with
# DefaultScreen = Gdk.display_get_default().get_default_screen()
class MaxImageDisplay :
    """maximum bounds of image display"""
    x = Gdk.Screen.width() - 32
    y = Gdk.Screen.height() - 96
#end MaxImageDisplay
MainWindow = Gtk.Window()
MainWindow.connect("destroy", DestroyWindow)
MainWindow.connect("key_press_event", KeyPressEvent)
MainWindow.set_border_width(10)
MainVBox = Gtk.VBox(False, 8)
ImageDisplay = Gtk.Image()
MainVBox.pack_start(ImageDisplay, False, False, 0)
ImageLabel = Gtk.Label()
MainVBox.pack_start(ImageLabel, False, False, 0)
MainWindow.add(MainVBox)
MainWindow.show_all()
MainWindow.show()
LoadImage()
ShowImage()
Gtk.main()
