#!/usr/bin/python3
#+
# This script displays picture files in turn from specified directories,
# and allows the user to hit keystrokes to apply commands to them.
#
# Invoke this script as follows:
#
#     SortPictures [options] item [item ...]
#
# where each “item” is either the name of an image file or of a
# directory containg image files to be shown. Valid options are:
#
#     --act=k:cmd
#         defines a key binding, where k is a single ASCII character
#         which, when typed by the user, invokes cmd. This option can be
#         specified multiple times with different k values, to define multiple
#         key bindings. When cmd is invoked, occurrences of %s are substituted
#         with the full name of the image file.
#    --copy=k:dir
#         defines a key binding, where k is a single ASCII character
#         which, when typed by the user, will copy the current file into the
#         directory dir, which must already exist.
#    --copyc=k:dir
#         defines a key binding, where k is a single ASCII character
#         which, when typed by the user, will copy the current file into the
#         directory dir. The directory will be created when the first file is moved
#         into it if it doesn’t already exist.
#    --move=k:dir
#         defines a key binding, where k is a single ASCII character
#         which, when typed by the user, will move the current file into the
#         directory dir, which must already exist.
#    --movec=k:dir
#         defines a key binding, where k is a single ASCII character
#         which, when typed by the user, will move the current file into the
#         directory dir. The directory will be created when the first file is moved
#         into it if it doesn’t already exist.
#    --movesub=k:dir
#         defines a key binding, where k is a single ASCII character
#         which, when typed by the user, will move the current file into the
#         subdirectory of dir with the same name as its current immediate parent
#         directory. The destination subdirectory of that name will be created
#         if it doesn’t already exist.
#    --random
#         equivalent to --sort=random
#    --scale=scalefactor[,how]
#         specifies a scale factor and method to be applied to each image before display.
#         scalefactor is interpreted as a percentage if it ends with a “%”, otherwise
#         as a number. If omitted, the default is 1.0 (100%).
#         how is the scaling method: “nearest”, “tiles”, “bilinear” or “hyper”
#         (see https://developer.gnome.org/gdk-pixbuf/stable/gdk-pixbuf-Scaling.html#gdk-pixbuf-scale-simple
#         for the details). If omitted, the default is “tiles”.
#    --seen=seendb
#         specifies the name of an SQLite database file in which to record
#         details about images already seen. As each image is viewed, it is
#         added to the database. Images already in the database are skipped.
#         NOTE: Using this feature can get slow as the number of records
#         in the database grows beyond, say, a few hundred.
#    --sort=how
#         displays the images in order according to how:
#             none (default) -- no special sorting
#             mod -- sort by last-mod date
#             name -- sort by name
#             numeric -- sort by name, but interpreting sequences of decimal
#                 digits numerically
#             random -- display in random order
#             reversed -- can be combined with mod or name to reverse sort order
#    --start=n
#         start the display at picture n in the sequence, instead
#         of picture 1. Instead of an integer, you can specify the
#         word “random” to pick a random starting point.
#    --tosee=toseedb
#         specifies the name of an SQLite database file in which to record
#         details about images not already seen. If specified instead of any
#         file/directory names, then this database should already have been
#         preloaded with the names of files to see; if any file/directory names
#         were specified as well, then their names will be loaded into this
#         database and marked initially unseen. As images are shown, their
#         entries in this database will be marked as seen, so they won’t be
#         shown again.
#    --trash
#         enable the use of the DEL key to move the file into the Trash folder.
#
# Standard keystrokes are:
#    right or down arrow -- go to next picture
#    left or up arrow -- go to previous picture
#    F1 -- write filename path to standard output
#    F11 -- rotate picture anticlockwise
#    F12 -- rotate picture clockwise
#    SPACE -- try to play file as a movie
#    CTRL/Z -- undo last move/movec/movesub action
#
# Copyright 2006-2019 by Lawrence D’Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under CC-BY-SA <http://creativecommons.org/licenses/by-sa/4.0/>.
#-

import sys
import os
import stat
from enum import \
    IntEnum
import re
import random
import hashlib
import subprocess
import getopt
import shlex
import shutil
import apsw as sqlite
import gi
gi.require_version("Gdk", "3.0")
gi.require_version("Gtk", "3.0")
from gi.repository import \
    GLib, \
    Gdk, \
    GdkPixbuf, \
    Gtk

#+
# Useful stuff
#-

def for_each_file(arglist, action, actionarg) :
    """invokes action(filename, actionarg) for each non-directory item
    found in arglist. If an item is not a directory, passes it directly
    to action; otherwise, passes each file directly contained within it,
    unless the name ends with "...", in which case all file descendants
    of the directory are passed."""

    def for_each(item, recurse) :
        if os.path.isdir(item) :
            for child in os.listdir(item) :
                child = os.path.join(item, child)
                if os.path.isdir(child) :
                    if recurse :
                        for_each(child, True)
                    #end if
                else :
                    action(child, actionarg)
                #end if
            #end for
        else :
            action(item, actionarg)
        #end if
    #end for_each

#begin for_each_file
    for arg in arglist :
        if arg.endswith("...") :
            recurse = True
            arg = arg[0 : -3]
        else :
            recurse = False
        #end if
        for_each(arg, recurse)
    #end for
#end for_each_file

def strip_prefix(s, prefix) :
    "strips prefix from beginning of s if present."
    if s.startswith(prefix) :
        s = s[len(prefix):]
    #end if
    return \
        s
#end strip_prefix

#+
# Useful database stuff
#-

class DB_OPEN(IntEnum) :
    "database opening modes."
    READONLY = 0 # existing database, only for reading
    READWRITE = 1 # existing database, for reading and writing
    READWRITECREATE = 2 # create database if it doesn’t exist, open for reading and writing
#end DB_OPEN

class TOSEE(IntEnum) :
    "flag masks for tosee.flags."
    SEEN = 1
#end TOSEE

first_tuple_field = lambda x : x[0]
  # mapfn for db_iter that extracts first or only field from each tuple

def db_iter(conn, cmd, mapfn = lambda x : x) :
    "executes cmd on a new cursor from connection conn and yields the results in turn."
    for item in conn.cursor().execute(cmd) :
        yield mapfn(item)
    #end while
#end db_iter

def open_db_common(dbname, mode, test_table, test_field, create_tables) :
    "common routine for opening the specified database file and returning a new" \
    " connection. mode is DB_OPEN value, test_table is a table and test_field a field to" \
    " test the existence of within that table, and create_tables is a list of table-creation" \
    " command strings to execute if that table doesn't exist."
    result = \
        sqlite.Connection \
          (
            dbname,
            flags =
                    (sqlite.SQLITE_OPEN_READONLY, sqlite.SQLITE_OPEN_READWRITE)[mode >= DB_OPEN.READWRITE]
                |
                    (0, sqlite.SQLITE_OPEN_CREATE)[mode == DB_OPEN.READWRITECREATE]
          )
    cu = result.cursor()
    try :
        cu.execute("select count(*) from %s where %s is not null" % (test_table, test_field))
        inited = True
    except sqlite.SQLError :
        if mode < DB_OPEN.READWRITECREATE :
            raise
        #end if
        # assume it’s a newly-created database, need to set up the tables
        inited = False
    #end try
    if not inited :
        sys.stderr.write("Initializing new database\n") # debug
        for create_table in create_tables :
            cu.execute(create_table)
        #end for
    #end if
    cu.close()
    return \
        result
#end open_db_common

def open_seen_db(dbname, mode) :
    "opens the specified images-seen database file and returns a new connection."
    return \
        open_db_common \
          (
            dbname = dbname,
            mode = mode,
            test_table = "seen",
            test_field = "sha256",
            create_tables =
                [
                    "create table seen\n"
                    "  (\n"
                    "    filename varchar not null,\n"
                    "    sha256 blob,\n"
                    "    length integer unsigned not null,\n"
                    "    mod_date integer unsigned not null\n"
                    "  )\n",
                    "create index hash on seen(sha256)\n",
                    "create index file_length on seen(length)\n",
                    "create index file_mod_date on seen(mod_date)\n",
                ]
          )
#end open_seen_db

def open_tosee_db(dbname, mode) :
    return \
        open_db_common \
          (
            dbname = dbname,
            mode = mode,
            test_table = "tosee",
            test_field = "filename",
            create_tables =
                [
                    "create table tosee\n"
                    "  (\n"
                    "    filename varchar not null,\n"
                    "    flags unsigned integer not null default 0,\n"
                    "    primary key (filename)\n"
                    "  )\n",
                    "create index filename on tosee(filename)\n",
                    "create table globals\n"
                    "  (\n"
                    "    name varchar not null,\n"
                    "    value blob,\n"
                    "    primary key (name)\n"
                    "  )\n",
                    "insert into globals(name, value) values ('basepath', '')",
                ]
          )
#end open_tosee_db

def db_one_record(conn, cmd, mapfn = lambda x : x) :
    "does a query which is assumed to return a single record, and returns it."
    rows = db_iter(conn, cmd, mapfn)
    result = next(rows)
    assert next(rows, None) == None, "query returned more than one record"
    return \
        result
#end db_one_record

def get_file_hash(filename) :
    "computes a SHA-256 hash of the specified file’s contents."
    hash = hashlib.sha256()
    hash.update(open(filename, "rb").read())
    return \
        hash.digest()
#end get_file_hash

#+
# Keypress actions
#
# The routine that actually performs the action on the file can
# return another routine which will undo the action.
#-

def make_run_cmd_action(fmt) :
    """returns a function which substitutes its argument into fmt and
    executes the result as a shell command."""

    def run_cmd_action(filename) :
        cmd = fmt % filename
        print(cmd)
        os.system(cmd)
    #end run_cmd_action

#begin make_run_cmd_action
    return \
        run_cmd_action
#end make_run_cmd_action

def make_move_copy_action(dir, do_copy, create_if) :
    """returns a function which moves the file named by its argument into dir."""

    def check_exists() :
        nonlocal exists
        if not exists :
            os.mkdir(dir)
            print("dir “%s” created" % dir)
            exists = True
        #end if
    #end check_exists

    def move_action(filename) :
        check_exists()
        dstname = os.path.join(dir, os.path.basename(filename))
        print("move %s => %s" % (filename, dstname))
        os.rename(filename, dstname)
        def undo() :
            print("restore %s => %s" % (dstname, filename))
            os.rename(dstname, filename)
        #end undo
        return \
            undo
    #end move_action

    def copy_action(filename) :
        check_exists()
        dstname = os.path.join(dir, os.path.basename(filename))
        print("copy %s => %s" % (filename, dstname))
        shutil.copy(filename, dstname)
        info = os.stat(filename)
        os.utime(dstname, (info.st_atime, info.st_mtime))
        def undo() :
            print("uncopy %s" % dstname)
            os.unlink(dstname)
        #end undo
        return \
            undo
    #end copy_action

#begin make_move_copy_action
    exists = os.path.isdir(dir)
    if (
            not exists
        and
            (not create_if or os.path.lexists(dir))
    ) :
        raise RuntimeError("“%s” is not a directory" % dir)
    #end if
    return \
        (move_action, copy_action)[do_copy]
#end make_move_copy_action

def make_move_sub_action(dir) :
    """returns a function which moves the file named by its argument into
    the corresponding subdirectory of dir."""

    def move_sub_action(filename) :
        parent, child = os.path.split(filename)
        grandparent, parent = os.path.split(parent)
        destdir = os.path.join(dir, parent)
        if not os.path.isdir(destdir) :
            if os.path.lexists(destdir) :
                raise RuntimeError("“%s” is not a directory" % destdir)
            #end if
            os.mkdir(destdir)
        #end if
        dstname = os.path.join(destdir, child)
        print("move %s => %s" % (filename, dstname))
        os.rename(filename, dstname)
        def undo() :
            print("restore %s => %s" % (dstname, filename))
            os.rename(dstname, filename)
        #end undo
        return \
            undo
    #end move_sub_action

#begin make_move_sub_action
    return \
        move_sub_action
#end make_move_sub_action

def move_trash_action(filename) :
    """moves the filename to the trash."""
    homedir = os.path.abspath(os.getenv("HOME", "/")) + "/"
    fullpath = os.path.abspath(filename)
    trashdir = os.path.join(homedir, "Trash")
    if fullpath.startswith(homedir) :
        trashpath = trashdir + "/" + fullpath[len(homedir):]
    else :
        trashpath = trashdir + fullpath
    #end if
    print("trash %s => %s" % (fullpath, trashpath))
    os.makedirs(os.path.split(trashpath)[0], exist_ok = True)
    os.rename(fullpath, trashpath)
    def undo() :
        print("restore %s => %s" % (trashpath, fullpath))
        os.rename(trashpath, fullpath)
    #end undo
    return \
        undo
#end move_trash_action

#+
# GUI callbacks
#-

# globals:
# the_image -- GDK pixbuf object containing image being displayed
# imagename -- filename for image being displayed
# image_display -- GTK image object for showing an image
# image_label -- GTK label object for showing image name
#
# actions -- mapping of actions to perform by keystroke
# files -- list of image files to show
# file_index -- index into files of image being shown
# file_rotations -- current rotations to apply to files
# last_undo -- function to invoke to undo last action (if any)

seen_db = None
tosee_db = None
tosee_base_path = None
last_undo = None

def destroy_window(the_window) :
    # called when main window’s close box is clicked.
    global seen_db, tosee_db
    if seen_db != None :
        seen_db.close()
        seen_db = None
    #end if
    if tosee_db != None :
        tosee_db.close()
        tosee_db = None
    #end if
    Gtk.main_quit()
#end destroy_window

def update_seen(setit) :
    if setit != None :
        if seen_db != None :
            cu = seen_db.cursor()
            if setit :
                info = os.stat(imagename)
                cu.execute \
                  (
                        "insert into seen (filename, sha256, length, mod_date)"
                        " values (%(filename)s, %(sha256)s, %(length)d, %(mod_date)d)"
                    %
                        {
                            "filename" : sqlite.format_sql_value(os.path.basename(imagename)),
                            "sha256" : sqlite.format_sql_value(get_file_hash(imagename)),
                            "length" : info.st_size,
                            "mod_date" : info.st_mtime_ns,
                        }
                  )
            else :
                cu.execute \
                  (
                        "delete from seen where filename = %(filename)s"
                    %
                        {
                            "filename" : sqlite.format_sql_value(os.path.basename(imagename)),
                        }
                  )
            #end if
            cu.close()
        #end if
        if tosee_db != None :
            cu = tosee_db.cursor()
            cu.execute \
              (
                    "update tosee set flags = flags & %(clear_seen)d | %(set_seen)d where filename = %(path)s"
                %
                    {
                        "path" : sqlite.format_sql_value(strip_prefix(strip_prefix(imagename, "./"), tosee_base_path)),
                        "clear_seen" : ~ (TOSEE.SEEN, 0)[setit],
                        "set_seen" : (0, TOSEE.SEEN)[setit],
                    }
              )
            cu.close()
        #end if
    #end if
#end update_seen

def load_image(set_seen) :
    # loads and shows the image from the currently selected file.
    global the_image, imagename
    imagename = files[file_index]
    try :
        the_image = GdkPixbuf.Pixbuf.new_from_file(imagename)
    except GLib.GError :
        the_image = None
    #end try
    if the_image != None :
        if set_seen != None :
            update_seen(set_seen)
        #end if
    #end if
    if the_image != None and scale_factor != None :
        the_image = the_image.scale_simple(int(the_image.get_width() * scale_factor), int(the_image.get_height() * scale_factor), scale_how)
    #end if
    rotation = file_rotations.get(file_index, GdkPixbuf.PixbufRotation.NONE)
    if rotation != GdkPixbuf.PixbufRotation.NONE :
        the_image = the_image.rotate_simple(rotation)
    #end if
    show_image()
#end load_image

def rotate_image(clockwise) :
    # rotates the displayed image by 90 degrees.
    global the_image
    if clockwise :
        direction = GdkPixbuf.PixbufRotation.CLOCKWISE
    else :
        direction = GdkPixbuf.PixbufRotation.COUNTERCLOCKWISE
    #end if
    if the_image != None :
        file_rotations[file_index] = GdkPixbuf.PixbufRotation((file_rotations.get(file_index, GdkPixbuf.PixbufRotation.NONE) + direction) % 360)
        the_image = the_image.rotate_simple(direction)
    #end if
#end rotate_image

def show_image() :
    # displays the currently-loaded image in the main window.
    if the_image != None :
        image_width = the_image.get_property("width")
        image_height = the_image.get_property("height")
        if image_width > MaxImageDisplay.x or image_height > MaxImageDisplay.y :
            scale_factor = min \
              (
                MaxImageDisplay.x * 1.0 / image_width,
                MaxImageDisplay.y * 1.0 / image_height
              )
            use_image = the_image.scale_simple \
              (
                dest_width = int(round(scale_factor * image_width)),
                dest_height = int(round(scale_factor * image_height)),
                interp_type = GdkPixbuf.InterpType.BILINEAR
              )
        else :
            scale_factor = 1
            use_image = the_image
        #end if
        image_display.set_from_pixbuf(use_image)
        scale_display = "%d%%" % round(scale_factor * 100)
    else :
        image_display.set_from_icon_name \
          (
            "missing-image",
            Gtk.IconSize.LARGE_TOOLBAR
          )
        scale_display = "?"
    #end if
    image_label.set_text("%u/%u: %s (%s)" % (file_index + 1, len(files), files[file_index], scale_display))
#end show_image

def play_movie() :
    # tries to play the file as a movie.
    filename = files[file_index]
    if filename.endswith(".swf") :
        cmd = ("gnash", "-1")
    elif filename.endswith(".pdf") :
        cmd = ("okular",)
    else :
        cmd = ("ffplay", "-autoexit")
    #end if
    subprocess.check_call \
      (
        args = cmd + (os.path.join(os.getcwd(), filename),),
        stdin = open("/dev/null", "r"), # subprocess.DEVNULL,
      )
#end play_movie

def key_press_event(the_window, the_event) :
    # called in response to a keystroke when the main window has the focus.
    global files, file_index, last_undo
    # print("Keypress type %d val %d mods %#x" % (the_event.type, the_event.keyval, the_event.state)) # debug
    # print("Event %s" % repr({k : getattr(the_event, k) for k in dir(the_event) if not k.startswith("_")})) # debug
    key = the_event.keyval
    masks = Gdk.ModifierType
    modifiers = \
        (
            the_event.state
        &
            # ignore all except basic modifiers. I was getting MOD2_MASK set,
            # which I think corresponds to num lock.
            (
                masks.CONTROL_MASK
            |
                masks.HYPER_MASK
            |
                masks.META_MASK
            |
                masks.SHIFT_MASK
            |
                masks.SUPER_MASK
            )
        )
    if modifiers == 0 :
        if key == Gdk.KEY_Down or key == Gdk.KEY_Right :
            update_seen(True) # in case went to it via left-arrow
            if file_index + 1 < len(files) :
                file_index += 1
                load_image(True)
            #end if
        elif key == Gdk.KEY_Up or key == Gdk.KEY_Left :
            update_seen(False)
            if file_index > 0 :
                file_index -= 1
                load_image(None)
            #end if
        elif key == Gdk.KEY_F1 :
            sys.stdout.write(shlex.quote(files[file_index]) + "\n")
        elif key == Gdk.KEY_F11 :
            rotate_image(False)
            show_image()
        elif key == Gdk.KEY_F12 :
            rotate_image(True)
            show_image()
        elif key == Gdk.KEY_Delete :
            if enable_trash :
                last_undo = move_trash_action(files[file_index])
            #end if
        elif key == Gdk.KEY_space :
            play_movie()
        elif key == Gdk.KEY_Escape :
            destroy_window(main_window)
        elif key in actions :
            last_undo = actions[key](files[file_index])
        #end if
    elif modifiers == masks.CONTROL_MASK :
        if key == Gdk.KEY_z :
            if last_undo != None :
                do = last_undo
                last_undo = None
                do()
                load_image(None)
            #end if
        #end if
    #end if
    return True
#end key_press_event

#+
# Mainline
#-

def set_act(keyword, value, make_action) :
    if len(value) > 2 and value[1] == ":" :
        actions[ord(value[0])] = make_action(os.path.expanduser(value[2:]))
    else :
        raise getopt.GetoptError("Invalid %s syntax: %s" % (keyword, repr(value)))
    #end if
#end set_act

def add_file(item, files) :
    # for_each_file action to collect names of all image files.
    addit = True # to begin with
    if seen_db != None :
        # Use same heuristic as rsync does to speed up matches: look up file
        # size and mod date/time to narrow down the candidates before
        # actually bothering to compute the hash of file contents.
        cu = seen_db.cursor()
        info = os.lstat(item)
        if stat.S_ISLNK(info.st_mode) :
            addit = False # don't follow symlinks
        else :
            cu.execute \
              (
                    "select sha256 from seen where length = %d and mod_date = %d"
                %
                    (info.st_size, info.st_mtime_ns)
              )
            hash = None # don’t compute hash until needed
            while True :
                exists = cu.fetchone()
                if exists == None :
                    break
                if hash == None :
                    hash = get_file_hash(item)
                #end if
                if hash == exists[0] :
                    addit = False
                    break
                #end if
            #end while
        #end if
    #end if
    if addit :
        files.append(item)
    #end if
#end add_file

def numeric_name_key(filename) :
    "sort key callback which orders filenames interpreting sequences of" \
    " decimal digits numerically."
    key = []
    while True :
        if len(filename) == 0 :
            break
        split = re.search("\d+", filename)
        if split == None :
            key.append(filename)
            break
        #end if
        if split.start() != 0 :
            key.append(filename[:split.start()])
        #end if
        key.append(int(filename[split.start() : split.end()]))
        filename = filename[split.end():]
    #end while
    return \
        tuple(key)
#end numeric_name_key

def mod_date_key(filename) :
    "sort key callback which orders files by their last-mod date."
    return \
        os.stat(filename).st_mtime
#end mod_date_key

def order(files) :
    # sorts files according to the key mapping defined by sort_key.

    cache = {} # avoid repeated key computations

    def get_key(filename) :
        if filename not in cache :
            cache[filename] = sort_key(filename)
        #end if
        return \
            cache[filename]
    #end get_key

#begin
    files.sort(key = get_key, reverse = reversed_sort)
#end order

opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["act=", "copy=", "copyc=", "move=", "movec=", "movesub=",
        "random", "scale=", "seen=", "sort=", "start=", "tosee=", "trash"]
  )

actions = {}
do_sort = None
reversed_sort = False
enable_trash = False
file_index = 0
scale_factor = None
for keyword, value in opts :
    if keyword == "--act" :
        set_act(keyword, value, make_run_cmd_action)
    elif keyword == "--copy" or keyword == "--copyc" :
        set_act(keyword, value, lambda Arg : make_move_copy_action(Arg, True, keyword == "--copyc"))
    elif keyword == "--move" or keyword == "--movec" :
        set_act(keyword, value, lambda Arg : make_move_copy_action(Arg, False, keyword == "--movec"))
    elif keyword == "--movesub" :
        set_act(keyword, value, make_move_sub_action)
    elif keyword == "--random" :
        do_sort = random.shuffle
    elif keyword == "--scale" :
        value = value.split(",", 1)
        if len(value) == 2 :
            scale_how = \
                {
                    "nearest" : GdkPixbuf.InterpType.NEAREST,
                    "tiles" : GdkPixbuf.InterpType.TILES,
                    "bilinear" : GdkPixbuf.InterpType.BILINEAR,
                    "hyper" : GdkPixbuf.InterpType.HYPER,
                }[value[1]]
        else :
            scale_how = GdkPixbuf.InterpType.TILES # default
        #end if
        value = value[0]
        if value.endswith("%") :
            scale_factor = float(value[:-1]) / 100
        else :
            scale_factor = float(value)
        #end if
    elif keyword == "--seen" :
        if seen_db != None :
            raise getopt.GetoptError("can specify --seen only once")
        #end if
        seen_db = open_seen_db(value, DB_OPEN.READWRITECREATE)
    elif keyword == "--sort" :
        for item in value.split(":") :
            if item == "random" :
                do_sort = random.shuffle
            elif item == "mod" :
                sort_key = mod_date_key
                do_sort = order
            elif item == "name" :
                sort_key = lambda name : os.path.split(name)[1]
                do_sort = order
            elif item == "numeric" :
                sort_key = numeric_name_key
                do_sort = order
            elif item == "none" :
                do_sort = None
            elif item == "reversed" :
                reversed_sort = True
            else :
                raise getopt.GetoptError("Invalid sort option %s" % item)
            #end if
        #end for
    elif keyword == "--start" :
        if value == "random" :
            file_index = "random"
        else :
            file_index = int(value) - 1
        #end if
    elif keyword == "--tosee" :
        if tosee_db != None :
            raise getopt.GetoptError("can specify --tosee only once")
        #end if
        tosee_db = open_tosee_db(value, DB_OPEN.READWRITECREATE)
        tosee_base_path = db_one_record \
          (
            conn = tosee_db,
            cmd = "select value from globals where name = 'basepath'",
            mapfn = first_tuple_field
          )
    elif keyword == "--trash" :
        enable_trash = True
    #end if
#end for

files = []
for_each_file(args, add_file, files)
if tosee_db != None :
    if len(files) != 0 :
        cu = tosee_db.cursor()
        cu.execute("begin transaction")
        for f in files :
            cu.execute \
              (
                    "insert or ignore into tosee(filename, flags) values(%s, 0)"
                %
                    sqlite.format_sql_value(strip_prefix(strip_prefix(f, "./"), tosee_base_path))
              )
        #end for
        cu.execute("end transaction")
        cu.close()
    #end if
    files = list \
      (
        os.path.join(tosee_base_path, f)
        for f in
            db_iter
              (
                conn = tosee_db,
                cmd = "select filename from tosee where flags & %d = 0" % TOSEE.SEEN,
                mapfn = first_tuple_field
              )
      )
#end if

if len(files) == 0 :
    raise getopt.GetoptError("Nothing to do")
#end if
if file_index == "random" :
    file_index = random.randrange(len(files))
elif file_index < 0 or file_index >= len(files) :
    raise getopt.GetoptError("--start index out of range")
#end if
if do_sort != None :
    do_sort(files)
#end if
file_rotations = {}

the_image = None # to begin with
# default_screen = Gdk.display_get_default().get_default_screen()
class MaxImageDisplay :
    "maximum bounds of image display."
    r = Gdk.Display.get_default().get_primary_monitor().get_geometry()
    x = r.width - 32
    y = r.height - 96
    del r
#end MaxImageDisplay
main_window = Gtk.Window()
main_window.connect("destroy", destroy_window)
main_window.connect("key_press_event", key_press_event)
main_window.set_border_width(10)
main_vbox = Gtk.VBox(homogeneous = False, spacing = 8)
image_display = Gtk.Image()
main_vbox.pack_start(image_display, False, False, 0)
image_label = Gtk.Label()
main_vbox.pack_start(image_label, False, False, 0)
main_window.add(main_vbox)
main_window.show_all()
main_window.show()
load_image(True)
Gtk.main()
